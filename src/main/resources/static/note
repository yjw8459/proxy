AOP

포인트컷 : 어디에 부가 기능을 적용할지, 어디에 부가 기능을 적용하지 않을지 판단하는 필터링 로직이다. 주로 클래스와 메서드 이름으로 필터링 한다.
		이름 그대로 어떤 포인트에 기능을 적용할지 하지 않을 지 잘라서 구분하는 것이다.

어드바이스 : 이 전에 본 것 처럼 프록시가 호출하는 부가 기능이다. 단순하게 프록시 로직이라 생각하면 된다.

어드바이저 : 단순하게 하나의 포인트컷과 하나의 어드바이스를 가지고 있는 것이다. 쉽게 이야기해서 포인트컷1 + 어드바이스1이다.(조언자)



## 역할과 책임
명확하게 분리하기 위함.

포인트컷은 대상 여부를 확인하는 역할만 담당한다.
어드바이스는 깔끔하게 부가기능 로직만 담당한다.

둘을 합쳐서 어드바이저가 된다. 어드바이저는 하나의 포인트컷과 하나의 어드바이스로 구성된다.

** 포인트 컷

1. 프록시 적용 여부 판단 - 생성 단계
- 자동 프록시 생성기는 포인트컷을 사용해서 해당 빈이 프록시를 생성할 필요가 있는지 없는지 체크.
- 클래스 + 메서드 조건을 모두 비교한다. 이 때 모든 메서드를 체크하는데, 포인트 컷 조건에 하나하나 매칭해본다.
  조건에 맞는 것이 하나라도 있을 경우 프록시 생성.

2. 어드바이스 적용 여부 판단 - 사용 단계
- 프록시가 호출되었을 때 부가 기능인 어드바이스를 적용할지 말지 포인트 컷을 보고 판단한다.
- 앞서 설명한 예에서 orderControllerV1은 이미 프록시가 걸려있다.
- orderControllerV1의 request()는 현재 포인트컷 조건에 만족하므로 프록시는 어드바이스를 먼저 호출하고, target을 호출한다.
- orderControllerV1의 noLog()는 현재 포인트컷 조건에 만족하지 않으므로 어드바이스를 호출하지 않고 바로 target만 호출한다.

프록시는 모든 곳에 생성하는 것은 자원을 낭비한다. 최소한의 프록시를 적용해야함.
자동 프록시 생성기는 모든 프록시 빈에 프록시를 적용하는 것이 아니라, 포인트 컷으로 한 번 필터링해서
어드바이스를 사용할 가능성이 있는 곳에서만 프록시를 생성한다.

** 클라이언트에서 요청이 오면 어드바이저를 찾아서 해당하는 어드바이저를 찾아서 프록시를 하나만 생성한다. **

@AspectJ
관점 지향 프로그래밍(AOP)를 가능하게 하는 AspectJ 프로젝트에서 제공하는 애노테이션이다.
스프링은 이것을 차용해서 프록시를 통한 AOP를 가능하게 한다.

자동 프록시 생성기 : AnnotationAwareAspectJAutoProxyCreator

자동 프록시 생성기는 Advisor를 자동으로 찾아와서 필요한 곳에 프록시를 생성하고 적용해준다.
자동 프록시 생성기는 여기에 추가로 @Aspect를 찾아서 이것을 Advisor로 만들어준다.
즉, @Aspect를 Advisor로 변환하여 저장하는 기능도 수행한다.

AnnotationAware(애노테이션을 인식한다는 뜻)

@Aspect를 어드바이저로 변환하여 저장하는 과정

1. 실행 : 스프링 애플리케이션 로딩 시점에 자동으로 프록시 생성기를 호출한다.
2. 모든 @Aspet 빈 조회 : 자동 프록시 생성기는 스프링 컨테이너에서 `@Aspect` 애노테이션이 붙은 스프링 빈을 모두 조회한다.
3. 어드바이저 생성 : `@Aspect` 어드바이저 빌더를 통해 `@Aspect` 애노테이션 정보를 기반으로 어드바이저를 생성한다.
4. @Aspect 기반 어드바이저 저장 : 생성한 어드바이저를 `@Aspect` 어드바이저 빌더 내부에 저장한다.

@Aspect 어드바이저 빌더 : BeanFactoryAspectJAdvisorsBuilder
`@Aspect`의 정보를 기반으로 포인트컷, 어드바이스, 어드바이저를 생성하고 보관하는 것을 담당한다.
@Aspect의 정보를 기반으로 어드바이저를 만들고, @Aspect 어드바이저 빌더 내부 저장소에 캐시한다.
캐시에 어드바이저가 이미 만들어져 있는 경우 캐시에 저장된 어드바이저를 반환한다. (캐시를 통해 리소스 소모 최적화)

중요하다.

자동 프록시 생성기의 작동과정
1. 생성 : 스프링 빈 대싱이 되는 객체를 생성한다.(@Bean 컴포넌트 스캔 포함)

2. 전달 : 생성된 객체를 빈 저장소에 등록하기 직전에 빈 후처리기에 전달한다.

3-1.Advisor 빈 조회 : 스프링 컨테이너에서 Advisor 빈을 모두 조회한다.

3-2.@Aspect Advisor 조회 : @Aspect 어드바이저 빌더 내부에 저장된 Advisor를 모두 조회한다.

4. 프록시 적용 대상 체크 : 앞서 3-1, 3-2에서 조회한 Advisor에 포함되어 있는 포인트 컷을 사용해서
해당 객체가 프록시를 적용할 대상인지 아닌지 판단한다.
이 때 객체의 클래스 정보는 물론이고, 해당 객체의 모든 메서드를
포인트컷에 하나하나 모두 매칭해본다.
그래서 조건이 하나라도 만족하면 프록시 적용 대상이 된다.
예를 들어서 메서드 하나만 포인트컷 조건에 만족해도 프록시 적용 대상이 된다.

5. 프록시 생성 : 프록시 적용 대상이면 프록시를 생성하고 프록시를 반환한다.
그래서 프록시를 스프링 빈으로 등록한다.
만약 프록시 적용 대상이 아니라면 원본 객체를 반환해서 원본 객체를 스프링 빈으로 등록한다.

6. 빈 등록 : 반환된 객체는 스프링 빈으로 등록된다.

TIP : @Aspect 클래스에 @Around를 두개 만들경우 어드바이저는 두개 만들어진다.
즉, @Aspect 하나에 어드바이저 하나가 아니라, @Around 하나에 어드바이저 하나이다.
@Aspect는 어드바이저를 담은 빈이라는 표식